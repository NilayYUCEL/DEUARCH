// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/20/2020 16:34:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    2017510082_Nilay_Yucel_DEUARCH
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module 2017510082_Nilay_Yucel_DEUARCH_vlg_sample_tst(
	clk,
	INPUT,
	sampler_tx
);
input  clk;
input [3:0] INPUT;
output sampler_tx;

reg sample;
time current_time;
always @(clk or INPUT)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module 2017510082_Nilay_Yucel_DEUARCH_vlg_check_tst (
	ALUOUTPUT,
	AROUT,
	DATABUS,
	DATAMEMOUT,
	opcode,
	OUTPUT_R_OUT,
	R0Out,
	R1Out,
	R2Out,
	SCOUT,
	Vout,
	sampler_rx
);
input [3:0] ALUOUTPUT;
input [3:0] AROUT;
input [3:0] DATABUS;
input [3:0] DATAMEMOUT;
input [3:0] opcode;
input [3:0] OUTPUT_R_OUT;
input [3:0] R0Out;
input [3:0] R1Out;
input [3:0] R2Out;
input [2:0] SCOUT;
input  Vout;
input sampler_rx;

reg [3:0] ALUOUTPUT_expected;
reg [3:0] AROUT_expected;
reg [3:0] DATABUS_expected;
reg [3:0] DATAMEMOUT_expected;
reg [3:0] opcode_expected;
reg [3:0] OUTPUT_R_OUT_expected;
reg [3:0] R0Out_expected;
reg [3:0] R1Out_expected;
reg [3:0] R2Out_expected;
reg [2:0] SCOUT_expected;
reg  Vout_expected;

reg [3:0] ALUOUTPUT_prev;
reg [3:0] AROUT_prev;
reg [3:0] DATABUS_prev;
reg [3:0] DATAMEMOUT_prev;
reg [3:0] opcode_prev;
reg [3:0] OUTPUT_R_OUT_prev;
reg [3:0] R0Out_prev;
reg [3:0] R1Out_prev;
reg [3:0] R2Out_prev;
reg [2:0] SCOUT_prev;
reg  Vout_prev;

reg [3:0] ALUOUTPUT_expected_prev;
reg [3:0] AROUT_expected_prev;
reg [3:0] DATABUS_expected_prev;
reg [3:0] DATAMEMOUT_expected_prev;
reg [3:0] opcode_expected_prev;
reg [3:0] OUTPUT_R_OUT_expected_prev;
reg [3:0] R0Out_expected_prev;
reg [3:0] R1Out_expected_prev;
reg [3:0] R2Out_expected_prev;
reg [2:0] SCOUT_expected_prev;
reg  Vout_expected_prev;

reg [3:0] last_ALUOUTPUT_exp;
reg [3:0] last_AROUT_exp;
reg [3:0] last_DATABUS_exp;
reg [3:0] last_DATAMEMOUT_exp;
reg [3:0] last_opcode_exp;
reg [3:0] last_OUTPUT_R_OUT_exp;
reg [3:0] last_R0Out_exp;
reg [3:0] last_R1Out_exp;
reg [3:0] last_R2Out_exp;
reg [2:0] last_SCOUT_exp;
reg  last_Vout_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:11] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 11'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALUOUTPUT_prev = ALUOUTPUT;
	AROUT_prev = AROUT;
	DATABUS_prev = DATABUS;
	DATAMEMOUT_prev = DATAMEMOUT;
	opcode_prev = opcode;
	OUTPUT_R_OUT_prev = OUTPUT_R_OUT;
	R0Out_prev = R0Out;
	R1Out_prev = R1Out;
	R2Out_prev = R2Out;
	SCOUT_prev = SCOUT;
	Vout_prev = Vout;
end

// update expected /o prevs

always @(trigger)
begin
	ALUOUTPUT_expected_prev = ALUOUTPUT_expected;
	AROUT_expected_prev = AROUT_expected;
	DATABUS_expected_prev = DATABUS_expected;
	DATAMEMOUT_expected_prev = DATAMEMOUT_expected;
	opcode_expected_prev = opcode_expected;
	OUTPUT_R_OUT_expected_prev = OUTPUT_R_OUT_expected;
	R0Out_expected_prev = R0Out_expected;
	R1Out_expected_prev = R1Out_expected;
	R2Out_expected_prev = R2Out_expected;
	SCOUT_expected_prev = SCOUT_expected;
	Vout_expected_prev = Vout_expected;
end


// expected ALUOUTPUT[ 3 ]
initial
begin
	ALUOUTPUT_expected[3] = 1'bX;
end 
// expected ALUOUTPUT[ 2 ]
initial
begin
	ALUOUTPUT_expected[2] = 1'bX;
end 
// expected ALUOUTPUT[ 1 ]
initial
begin
	ALUOUTPUT_expected[1] = 1'bX;
end 
// expected ALUOUTPUT[ 0 ]
initial
begin
	ALUOUTPUT_expected[0] = 1'bX;
end 
// expected AROUT[ 3 ]
initial
begin
	AROUT_expected[3] = 1'bX;
end 
// expected AROUT[ 2 ]
initial
begin
	AROUT_expected[2] = 1'bX;
end 
// expected AROUT[ 1 ]
initial
begin
	AROUT_expected[1] = 1'bX;
end 
// expected AROUT[ 0 ]
initial
begin
	AROUT_expected[0] = 1'bX;
end 
// expected DATABUS[ 3 ]
initial
begin
	DATABUS_expected[3] = 1'bX;
end 
// expected DATABUS[ 2 ]
initial
begin
	DATABUS_expected[2] = 1'bX;
end 
// expected DATABUS[ 1 ]
initial
begin
	DATABUS_expected[1] = 1'bX;
end 
// expected DATABUS[ 0 ]
initial
begin
	DATABUS_expected[0] = 1'bX;
end 
// expected DATAMEMOUT[ 3 ]
initial
begin
	DATAMEMOUT_expected[3] = 1'bX;
end 
// expected DATAMEMOUT[ 2 ]
initial
begin
	DATAMEMOUT_expected[2] = 1'bX;
end 
// expected DATAMEMOUT[ 1 ]
initial
begin
	DATAMEMOUT_expected[1] = 1'bX;
end 
// expected DATAMEMOUT[ 0 ]
initial
begin
	DATAMEMOUT_expected[0] = 1'bX;
end 
// expected opcode[ 3 ]
initial
begin
	opcode_expected[3] = 1'bX;
end 
// expected opcode[ 2 ]
initial
begin
	opcode_expected[2] = 1'bX;
end 
// expected opcode[ 1 ]
initial
begin
	opcode_expected[1] = 1'bX;
end 
// expected opcode[ 0 ]
initial
begin
	opcode_expected[0] = 1'bX;
end 
// expected OUTPUT_R_OUT[ 3 ]
initial
begin
	OUTPUT_R_OUT_expected[3] = 1'bX;
end 
// expected OUTPUT_R_OUT[ 2 ]
initial
begin
	OUTPUT_R_OUT_expected[2] = 1'bX;
end 
// expected OUTPUT_R_OUT[ 1 ]
initial
begin
	OUTPUT_R_OUT_expected[1] = 1'bX;
end 
// expected OUTPUT_R_OUT[ 0 ]
initial
begin
	OUTPUT_R_OUT_expected[0] = 1'bX;
end 
// expected R0Out[ 3 ]
initial
begin
	R0Out_expected[3] = 1'bX;
end 
// expected R0Out[ 2 ]
initial
begin
	R0Out_expected[2] = 1'bX;
end 
// expected R0Out[ 1 ]
initial
begin
	R0Out_expected[1] = 1'bX;
end 
// expected R0Out[ 0 ]
initial
begin
	R0Out_expected[0] = 1'bX;
end 
// expected R1Out[ 3 ]
initial
begin
	R1Out_expected[3] = 1'bX;
end 
// expected R1Out[ 2 ]
initial
begin
	R1Out_expected[2] = 1'bX;
end 
// expected R1Out[ 1 ]
initial
begin
	R1Out_expected[1] = 1'bX;
end 
// expected R1Out[ 0 ]
initial
begin
	R1Out_expected[0] = 1'bX;
end 
// expected R2Out[ 3 ]
initial
begin
	R2Out_expected[3] = 1'bX;
end 
// expected R2Out[ 2 ]
initial
begin
	R2Out_expected[2] = 1'bX;
end 
// expected R2Out[ 1 ]
initial
begin
	R2Out_expected[1] = 1'bX;
end 
// expected R2Out[ 0 ]
initial
begin
	R2Out_expected[0] = 1'bX;
end 
// expected SCOUT[ 2 ]
initial
begin
	SCOUT_expected[2] = 1'bX;
end 
// expected SCOUT[ 1 ]
initial
begin
	SCOUT_expected[1] = 1'bX;
end 
// expected SCOUT[ 0 ]
initial
begin
	SCOUT_expected[0] = 1'bX;
end 

// expected Vout
initial
begin
	Vout_expected = 1'bX;
end 
// generate trigger
always @(ALUOUTPUT_expected or ALUOUTPUT or AROUT_expected or AROUT or DATABUS_expected or DATABUS or DATAMEMOUT_expected or DATAMEMOUT or opcode_expected or opcode or OUTPUT_R_OUT_expected or OUTPUT_R_OUT or R0Out_expected or R0Out or R1Out_expected or R1Out or R2Out_expected or R2Out or SCOUT_expected or SCOUT or Vout_expected or Vout)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALUOUTPUT = %b | expected AROUT = %b | expected DATABUS = %b | expected DATAMEMOUT = %b | expected opcode = %b | expected OUTPUT_R_OUT = %b | expected R0Out = %b | expected R1Out = %b | expected R2Out = %b | expected SCOUT = %b | expected Vout = %b | ",ALUOUTPUT_expected_prev,AROUT_expected_prev,DATABUS_expected_prev,DATAMEMOUT_expected_prev,opcode_expected_prev,OUTPUT_R_OUT_expected_prev,R0Out_expected_prev,R1Out_expected_prev,R2Out_expected_prev,SCOUT_expected_prev,Vout_expected_prev);
	$display("| real ALUOUTPUT = %b | real AROUT = %b | real DATABUS = %b | real DATAMEMOUT = %b | real opcode = %b | real OUTPUT_R_OUT = %b | real R0Out = %b | real R1Out = %b | real R2Out = %b | real SCOUT = %b | real Vout = %b | ",ALUOUTPUT_prev,AROUT_prev,DATABUS_prev,DATAMEMOUT_prev,opcode_prev,OUTPUT_R_OUT_prev,R0Out_prev,R1Out_prev,R2Out_prev,SCOUT_prev,Vout_prev);
`endif
	if (
		( ALUOUTPUT_expected_prev[0] !== 1'bx ) && ( ALUOUTPUT_prev[0] !== ALUOUTPUT_expected_prev[0] )
		&& ((ALUOUTPUT_expected_prev[0] !== last_ALUOUTPUT_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUTPUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUTPUT_expected_prev);
		$display ("     Real value = %b", ALUOUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOUTPUT_exp[0] = ALUOUTPUT_expected_prev[0];
	end
	if (
		( ALUOUTPUT_expected_prev[1] !== 1'bx ) && ( ALUOUTPUT_prev[1] !== ALUOUTPUT_expected_prev[1] )
		&& ((ALUOUTPUT_expected_prev[1] !== last_ALUOUTPUT_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUTPUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUTPUT_expected_prev);
		$display ("     Real value = %b", ALUOUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOUTPUT_exp[1] = ALUOUTPUT_expected_prev[1];
	end
	if (
		( ALUOUTPUT_expected_prev[2] !== 1'bx ) && ( ALUOUTPUT_prev[2] !== ALUOUTPUT_expected_prev[2] )
		&& ((ALUOUTPUT_expected_prev[2] !== last_ALUOUTPUT_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUTPUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUTPUT_expected_prev);
		$display ("     Real value = %b", ALUOUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOUTPUT_exp[2] = ALUOUTPUT_expected_prev[2];
	end
	if (
		( ALUOUTPUT_expected_prev[3] !== 1'bx ) && ( ALUOUTPUT_prev[3] !== ALUOUTPUT_expected_prev[3] )
		&& ((ALUOUTPUT_expected_prev[3] !== last_ALUOUTPUT_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUTPUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUTPUT_expected_prev);
		$display ("     Real value = %b", ALUOUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOUTPUT_exp[3] = ALUOUTPUT_expected_prev[3];
	end
	if (
		( AROUT_expected_prev[0] !== 1'bx ) && ( AROUT_prev[0] !== AROUT_expected_prev[0] )
		&& ((AROUT_expected_prev[0] !== last_AROUT_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AROUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AROUT_expected_prev);
		$display ("     Real value = %b", AROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AROUT_exp[0] = AROUT_expected_prev[0];
	end
	if (
		( AROUT_expected_prev[1] !== 1'bx ) && ( AROUT_prev[1] !== AROUT_expected_prev[1] )
		&& ((AROUT_expected_prev[1] !== last_AROUT_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AROUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AROUT_expected_prev);
		$display ("     Real value = %b", AROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AROUT_exp[1] = AROUT_expected_prev[1];
	end
	if (
		( AROUT_expected_prev[2] !== 1'bx ) && ( AROUT_prev[2] !== AROUT_expected_prev[2] )
		&& ((AROUT_expected_prev[2] !== last_AROUT_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AROUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AROUT_expected_prev);
		$display ("     Real value = %b", AROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AROUT_exp[2] = AROUT_expected_prev[2];
	end
	if (
		( AROUT_expected_prev[3] !== 1'bx ) && ( AROUT_prev[3] !== AROUT_expected_prev[3] )
		&& ((AROUT_expected_prev[3] !== last_AROUT_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AROUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AROUT_expected_prev);
		$display ("     Real value = %b", AROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AROUT_exp[3] = AROUT_expected_prev[3];
	end
	if (
		( DATABUS_expected_prev[0] !== 1'bx ) && ( DATABUS_prev[0] !== DATABUS_expected_prev[0] )
		&& ((DATABUS_expected_prev[0] !== last_DATABUS_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATABUS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATABUS_expected_prev);
		$display ("     Real value = %b", DATABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATABUS_exp[0] = DATABUS_expected_prev[0];
	end
	if (
		( DATABUS_expected_prev[1] !== 1'bx ) && ( DATABUS_prev[1] !== DATABUS_expected_prev[1] )
		&& ((DATABUS_expected_prev[1] !== last_DATABUS_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATABUS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATABUS_expected_prev);
		$display ("     Real value = %b", DATABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATABUS_exp[1] = DATABUS_expected_prev[1];
	end
	if (
		( DATABUS_expected_prev[2] !== 1'bx ) && ( DATABUS_prev[2] !== DATABUS_expected_prev[2] )
		&& ((DATABUS_expected_prev[2] !== last_DATABUS_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATABUS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATABUS_expected_prev);
		$display ("     Real value = %b", DATABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATABUS_exp[2] = DATABUS_expected_prev[2];
	end
	if (
		( DATABUS_expected_prev[3] !== 1'bx ) && ( DATABUS_prev[3] !== DATABUS_expected_prev[3] )
		&& ((DATABUS_expected_prev[3] !== last_DATABUS_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATABUS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATABUS_expected_prev);
		$display ("     Real value = %b", DATABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATABUS_exp[3] = DATABUS_expected_prev[3];
	end
	if (
		( DATAMEMOUT_expected_prev[0] !== 1'bx ) && ( DATAMEMOUT_prev[0] !== DATAMEMOUT_expected_prev[0] )
		&& ((DATAMEMOUT_expected_prev[0] !== last_DATAMEMOUT_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAMEMOUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAMEMOUT_expected_prev);
		$display ("     Real value = %b", DATAMEMOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATAMEMOUT_exp[0] = DATAMEMOUT_expected_prev[0];
	end
	if (
		( DATAMEMOUT_expected_prev[1] !== 1'bx ) && ( DATAMEMOUT_prev[1] !== DATAMEMOUT_expected_prev[1] )
		&& ((DATAMEMOUT_expected_prev[1] !== last_DATAMEMOUT_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAMEMOUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAMEMOUT_expected_prev);
		$display ("     Real value = %b", DATAMEMOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATAMEMOUT_exp[1] = DATAMEMOUT_expected_prev[1];
	end
	if (
		( DATAMEMOUT_expected_prev[2] !== 1'bx ) && ( DATAMEMOUT_prev[2] !== DATAMEMOUT_expected_prev[2] )
		&& ((DATAMEMOUT_expected_prev[2] !== last_DATAMEMOUT_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAMEMOUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAMEMOUT_expected_prev);
		$display ("     Real value = %b", DATAMEMOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATAMEMOUT_exp[2] = DATAMEMOUT_expected_prev[2];
	end
	if (
		( DATAMEMOUT_expected_prev[3] !== 1'bx ) && ( DATAMEMOUT_prev[3] !== DATAMEMOUT_expected_prev[3] )
		&& ((DATAMEMOUT_expected_prev[3] !== last_DATAMEMOUT_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATAMEMOUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATAMEMOUT_expected_prev);
		$display ("     Real value = %b", DATAMEMOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATAMEMOUT_exp[3] = DATAMEMOUT_expected_prev[3];
	end
	if (
		( opcode_expected_prev[0] !== 1'bx ) && ( opcode_prev[0] !== opcode_expected_prev[0] )
		&& ((opcode_expected_prev[0] !== last_opcode_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_opcode_exp[0] = opcode_expected_prev[0];
	end
	if (
		( opcode_expected_prev[1] !== 1'bx ) && ( opcode_prev[1] !== opcode_expected_prev[1] )
		&& ((opcode_expected_prev[1] !== last_opcode_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_opcode_exp[1] = opcode_expected_prev[1];
	end
	if (
		( opcode_expected_prev[2] !== 1'bx ) && ( opcode_prev[2] !== opcode_expected_prev[2] )
		&& ((opcode_expected_prev[2] !== last_opcode_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_opcode_exp[2] = opcode_expected_prev[2];
	end
	if (
		( opcode_expected_prev[3] !== 1'bx ) && ( opcode_prev[3] !== opcode_expected_prev[3] )
		&& ((opcode_expected_prev[3] !== last_opcode_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_opcode_exp[3] = opcode_expected_prev[3];
	end
	if (
		( OUTPUT_R_OUT_expected_prev[0] !== 1'bx ) && ( OUTPUT_R_OUT_prev[0] !== OUTPUT_R_OUT_expected_prev[0] )
		&& ((OUTPUT_R_OUT_expected_prev[0] !== last_OUTPUT_R_OUT_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT_R_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_R_OUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_R_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OUTPUT_R_OUT_exp[0] = OUTPUT_R_OUT_expected_prev[0];
	end
	if (
		( OUTPUT_R_OUT_expected_prev[1] !== 1'bx ) && ( OUTPUT_R_OUT_prev[1] !== OUTPUT_R_OUT_expected_prev[1] )
		&& ((OUTPUT_R_OUT_expected_prev[1] !== last_OUTPUT_R_OUT_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT_R_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_R_OUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_R_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OUTPUT_R_OUT_exp[1] = OUTPUT_R_OUT_expected_prev[1];
	end
	if (
		( OUTPUT_R_OUT_expected_prev[2] !== 1'bx ) && ( OUTPUT_R_OUT_prev[2] !== OUTPUT_R_OUT_expected_prev[2] )
		&& ((OUTPUT_R_OUT_expected_prev[2] !== last_OUTPUT_R_OUT_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT_R_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_R_OUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_R_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OUTPUT_R_OUT_exp[2] = OUTPUT_R_OUT_expected_prev[2];
	end
	if (
		( OUTPUT_R_OUT_expected_prev[3] !== 1'bx ) && ( OUTPUT_R_OUT_prev[3] !== OUTPUT_R_OUT_expected_prev[3] )
		&& ((OUTPUT_R_OUT_expected_prev[3] !== last_OUTPUT_R_OUT_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT_R_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_R_OUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_R_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OUTPUT_R_OUT_exp[3] = OUTPUT_R_OUT_expected_prev[3];
	end
	if (
		( R0Out_expected_prev[0] !== 1'bx ) && ( R0Out_prev[0] !== R0Out_expected_prev[0] )
		&& ((R0Out_expected_prev[0] !== last_R0Out_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0Out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0Out_expected_prev);
		$display ("     Real value = %b", R0Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R0Out_exp[0] = R0Out_expected_prev[0];
	end
	if (
		( R0Out_expected_prev[1] !== 1'bx ) && ( R0Out_prev[1] !== R0Out_expected_prev[1] )
		&& ((R0Out_expected_prev[1] !== last_R0Out_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0Out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0Out_expected_prev);
		$display ("     Real value = %b", R0Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R0Out_exp[1] = R0Out_expected_prev[1];
	end
	if (
		( R0Out_expected_prev[2] !== 1'bx ) && ( R0Out_prev[2] !== R0Out_expected_prev[2] )
		&& ((R0Out_expected_prev[2] !== last_R0Out_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0Out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0Out_expected_prev);
		$display ("     Real value = %b", R0Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R0Out_exp[2] = R0Out_expected_prev[2];
	end
	if (
		( R0Out_expected_prev[3] !== 1'bx ) && ( R0Out_prev[3] !== R0Out_expected_prev[3] )
		&& ((R0Out_expected_prev[3] !== last_R0Out_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0Out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0Out_expected_prev);
		$display ("     Real value = %b", R0Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R0Out_exp[3] = R0Out_expected_prev[3];
	end
	if (
		( R1Out_expected_prev[0] !== 1'bx ) && ( R1Out_prev[0] !== R1Out_expected_prev[0] )
		&& ((R1Out_expected_prev[0] !== last_R1Out_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1Out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1Out_expected_prev);
		$display ("     Real value = %b", R1Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R1Out_exp[0] = R1Out_expected_prev[0];
	end
	if (
		( R1Out_expected_prev[1] !== 1'bx ) && ( R1Out_prev[1] !== R1Out_expected_prev[1] )
		&& ((R1Out_expected_prev[1] !== last_R1Out_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1Out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1Out_expected_prev);
		$display ("     Real value = %b", R1Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R1Out_exp[1] = R1Out_expected_prev[1];
	end
	if (
		( R1Out_expected_prev[2] !== 1'bx ) && ( R1Out_prev[2] !== R1Out_expected_prev[2] )
		&& ((R1Out_expected_prev[2] !== last_R1Out_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1Out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1Out_expected_prev);
		$display ("     Real value = %b", R1Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R1Out_exp[2] = R1Out_expected_prev[2];
	end
	if (
		( R1Out_expected_prev[3] !== 1'bx ) && ( R1Out_prev[3] !== R1Out_expected_prev[3] )
		&& ((R1Out_expected_prev[3] !== last_R1Out_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1Out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1Out_expected_prev);
		$display ("     Real value = %b", R1Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R1Out_exp[3] = R1Out_expected_prev[3];
	end
	if (
		( R2Out_expected_prev[0] !== 1'bx ) && ( R2Out_prev[0] !== R2Out_expected_prev[0] )
		&& ((R2Out_expected_prev[0] !== last_R2Out_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2Out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2Out_expected_prev);
		$display ("     Real value = %b", R2Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R2Out_exp[0] = R2Out_expected_prev[0];
	end
	if (
		( R2Out_expected_prev[1] !== 1'bx ) && ( R2Out_prev[1] !== R2Out_expected_prev[1] )
		&& ((R2Out_expected_prev[1] !== last_R2Out_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2Out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2Out_expected_prev);
		$display ("     Real value = %b", R2Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R2Out_exp[1] = R2Out_expected_prev[1];
	end
	if (
		( R2Out_expected_prev[2] !== 1'bx ) && ( R2Out_prev[2] !== R2Out_expected_prev[2] )
		&& ((R2Out_expected_prev[2] !== last_R2Out_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2Out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2Out_expected_prev);
		$display ("     Real value = %b", R2Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R2Out_exp[2] = R2Out_expected_prev[2];
	end
	if (
		( R2Out_expected_prev[3] !== 1'bx ) && ( R2Out_prev[3] !== R2Out_expected_prev[3] )
		&& ((R2Out_expected_prev[3] !== last_R2Out_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2Out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2Out_expected_prev);
		$display ("     Real value = %b", R2Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R2Out_exp[3] = R2Out_expected_prev[3];
	end
	if (
		( SCOUT_expected_prev[0] !== 1'bx ) && ( SCOUT_prev[0] !== SCOUT_expected_prev[0] )
		&& ((SCOUT_expected_prev[0] !== last_SCOUT_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SCOUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SCOUT_expected_prev);
		$display ("     Real value = %b", SCOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SCOUT_exp[0] = SCOUT_expected_prev[0];
	end
	if (
		( SCOUT_expected_prev[1] !== 1'bx ) && ( SCOUT_prev[1] !== SCOUT_expected_prev[1] )
		&& ((SCOUT_expected_prev[1] !== last_SCOUT_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SCOUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SCOUT_expected_prev);
		$display ("     Real value = %b", SCOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SCOUT_exp[1] = SCOUT_expected_prev[1];
	end
	if (
		( SCOUT_expected_prev[2] !== 1'bx ) && ( SCOUT_prev[2] !== SCOUT_expected_prev[2] )
		&& ((SCOUT_expected_prev[2] !== last_SCOUT_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SCOUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SCOUT_expected_prev);
		$display ("     Real value = %b", SCOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SCOUT_exp[2] = SCOUT_expected_prev[2];
	end
	if (
		( Vout_expected_prev !== 1'bx ) && ( Vout_prev !== Vout_expected_prev )
		&& ((Vout_expected_prev !== last_Vout_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Vout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Vout_expected_prev);
		$display ("     Real value = %b", Vout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Vout_exp = Vout_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module 2017510082_Nilay_Yucel_DEUARCH_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [3:0] INPUT;
// wires                                               
wire [3:0] ALUOUTPUT;
wire [3:0] AROUT;
wire [3:0] DATABUS;
wire [3:0] DATAMEMOUT;
wire [3:0] opcode;
wire [3:0] OUTPUT_R_OUT;
wire [3:0] R0Out;
wire [3:0] R1Out;
wire [3:0] R2Out;
wire [2:0] SCOUT;
wire Vout;

wire sampler;                             

// assign statements (if any)                          
2017510082_Nilay_Yucel_DEUARCH i1 (
// port map - connection between master ports and signals/registers   
	.ALUOUTPUT(ALUOUTPUT),
	.AROUT(AROUT),
	.clk(clk),
	.DATABUS(DATABUS),
	.DATAMEMOUT(DATAMEMOUT),
	.\INPUT (INPUT),
	.opcode(opcode),
	.OUTPUT_R_OUT(OUTPUT_R_OUT),
	.R0Out(R0Out),
	.R1Out(R1Out),
	.R2Out(R2Out),
	.SCOUT(SCOUT),
	.Vout(Vout)
);

// clk
initial
begin
	clk = 1'b0;
end 
// \INPUT [ 3 ]
initial
begin
	INPUT[3] = 1'b0;
end 
// \INPUT [ 2 ]
initial
begin
	INPUT[2] = 1'b0;
end 
// \INPUT [ 1 ]
initial
begin
	INPUT[1] = 1'b0;
end 
// \INPUT [ 0 ]
initial
begin
	INPUT[0] = 1'b0;
end 

2017510082_Nilay_Yucel_DEUARCH_vlg_sample_tst tb_sample (
	.clk(clk),
	.INPUT(INPUT),
	.sampler_tx(sampler)
);

2017510082_Nilay_Yucel_DEUARCH_vlg_check_tst tb_out(
	.ALUOUTPUT(ALUOUTPUT),
	.AROUT(AROUT),
	.DATABUS(DATABUS),
	.DATAMEMOUT(DATAMEMOUT),
	.opcode(opcode),
	.OUTPUT_R_OUT(OUTPUT_R_OUT),
	.R0Out(R0Out),
	.R1Out(R1Out),
	.R2Out(R2Out),
	.SCOUT(SCOUT),
	.Vout(Vout),
	.sampler_rx(sampler)
);
endmodule

